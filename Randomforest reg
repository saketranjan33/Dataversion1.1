from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Define features and target
X = df[['Speed', 'AD', 'Fuel']]
y = df['CO2']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and train the Random Forest Regressor
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)

# Predict on test data
y_pred_train = rf_model.predict(X_train)
y_pred_test = rf_model.predict(X_test)

# Calculate performance metrics for train and test sets
mse_train = mean_squared_error(y_train, y_pred_train)
r2_train = r2_score(y_train, y_pred_train)
mse_test = mean_squared_error(y_test, y_pred_test)
r2_test = r2_score(y_test, y_pred_test)

print("Training Set Metrics:")
print(f"Mean Squared Error (MSE): {mse_train:.4f}")
print(f"R-squared (R²): {r2_train:.4f}")
print("\nTest Set Metrics:")
print(f"Mean Squared Error (MSE): {mse_test:.4f}")
print(f"R-squared (R²): {r2_test:.4f}")
import matplotlib.pyplot as plt

# Plot for Train Set: Actual vs Predicted
plt.figure(figsize=(10, 5))
plt.scatter(y_train, y_pred_train, color="green", alpha=0.5, label="Train Predictions")
plt.plot([y_train.min(), y_train.max()], [y_train.min(), y_train.max()], color="black", linestyle="--", label="Ideal Fit")
plt.xlabel("Actual CO2 Emissions")
plt.ylabel("Predicted CO2 Emissions")
plt.title("Actual vs Predicted CO2 Emissions (Train Set)")
plt.legend()
plt.grid(True)
plt.show()

# Plot for Test Set: Actual vs Predicted
plt.figure(figsize=(10, 5))
plt.scatter(y_test, y_pred_test, color="blue", alpha=0.5, label="Test Predictions")
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], color="red", linestyle="--", label="Ideal Fit")
plt.xlabel("Actual CO2 Emissions")
plt.ylabel("Predicted CO2 Emissions")
plt.title("Actual vs Predicted CO2 Emissions (Test Set)")
plt.legend()
plt.grid(True)
plt.show()

import matplotlib.pyplot as plt

# Calculate residuals for train and test sets
train_residuals = y_train - y_pred_train
test_residuals = y_test - y_pred_test

# Calculate residuals for train and test sets
train_residuals = y_train - y_pred_train
test_residuals = y_test - y_pred_test

# Residual Plot for Train Set
plt.figure(figsize=(10, 5))
plt.scatter(y_pred_train, train_residuals, color="purple", alpha=0.5, label="Train Residuals")
plt.axhline(0, color="black", linestyle="--", linewidth=1)
plt.xlabel("Predicted CO2 Emissions")
plt.ylabel("Residuals (Actual - Predicted)")
plt.title("Residuals Plot (Train Set)")
plt.legend()
plt.grid(True)
plt.show()

# Residual Plot for Test Set
plt.figure(figsize=(10, 5))
plt.scatter(y_pred_test, test_residuals, color="orange", alpha=0.5, label="Test Residuals")
plt.axhline(0, color="black", linestyle="--", linewidth=1)
plt.xlabel("Predicted CO2 Emissions")
plt.ylabel("Residuals (Actual - Predicted)")
plt.title("Residuals Plot (Test Set)")
plt.legend()
plt.grid(True)
# Bin the speed data into specified ranges (e.g., 10 bins)
df['Speed_Bin'] = pd.cut(df['Speed'], bins=10)

# Calculate the mean CO2 emissions for each Speed Bin
heatmap_data = df.groupby('Speed_Bin').agg({'CO2': 'mean'}).reset_index()

# Convert Speed_Bin to string for better display in the heatmap
heatmap_data['Speed_Bin'] = heatmap_data['Speed_Bin'].astype(str)

# Prepare data for heatmap by pivoting (use 'index' and 'values' directly)
plt.figure(figsize=(10, 6))
sns.heatmap(data=heatmap_data.set_index('Speed_Bin').T, cmap="YlGnBu", cbar_kws={'label': 'Mean CO2 Emissions'})
plt.title("Mean CO2 Emissions by Speed Bin")
plt.xlabel("Speed Bins")
plt.ylabel("Mean CO2 Emissions")
plt.xticks(rotation=45)
plt.show()
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
import numpy as np

# Calculate performance metrics for training set
mse_train = mean_squared_error(y_train, y_pred_train)
rmse_train = np.sqrt(mse_train)
mae_train = mean_absolute_error(y_train, y_pred_train)
r2_train = r2_score(y_train, y_pred_train)

print("Training Set Metrics:")
print(f"Mean Squared Error (MSE): {mse_train:.4f}")
print(f"Root Mean Squared Error (RMSE): {rmse_train:.4f}")
print(f"Mean Absolute Error (MAE): {mae_train:.4f}")
print(f"R-squared (R²): {r2_train:.4f}")
print("\n")

# Calculate performance metrics for testing set
mse_test = mean_squared_error(y_test, y_pred_test)
rmse_test = np.sqrt(mse_test)
mae_test = mean_absolute_error(y_test, y_pred_test)
r2_test = r2_score(y_test, y_pred_test)

print("Testing Set Metrics:")
print(f"Mean Squared Error (MSE): {mse_test:.4f}")
print(f"Root Mean Squared Error (RMSE): {rmse_test:.4f}")
print(f"Mean Absolute Error (MAE): {mae_test:.4f}")
print(f"R-squared (R²): {r2_test:.4f}")
